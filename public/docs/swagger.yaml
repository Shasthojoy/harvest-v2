# this is documentation represented in YAML for Harvest API
swagger: '2.0'
info:
    title: Harvest API
    version: "0.0.0"
host: localhost
# array of all schemes that your API supports
schemes:
    - https
# will be prefixed to all paths
basePath: /api
tags:
    - name: About HarvestAPI
      description: |
                           ## What is HarvestAPI?
                           The Harvest API is an open data platform for the publishing and sharing of agricultural sector data across government and with the public. It was developed by the SlashRoots Foundation in collaboration with Jamaica’s Rural Agricultural Development Authority’s (RADA) and Ministry of Agriculture (MoA). Through HarvestAPI RADA and the MoA publish and manage the sharing of crop production and farmer and farm registry data from RADA’s ABIS database as well as market price information from the MoA’s JAMIS database.
                           ### What is an API?
                           Simply put, an application programming interface (API) is a set of functions and procedures that allow the creation of applications which access the features or data of an operating system, application, or other service.
                           ### Open Source Project
                           This is an open source project which means the original source code is made freely available and may be redistributed and modified. The source code may be found [here on github](https://github.com/slashroots/harvest-v2)
                           ## ABIS & Relationship with RADA
                           ABIS is a web-based information programme developed by RADA, which provides information on crops, livestock, and agricultural production, markets and stakeholders, to support the business of agriculture.
    - name: What data does the API use?
      description: |
                           Harvest API uses data from ABIS, but only  providing non personal data to developers and the public.
                           # Data Resources
                           Data resources currently being offered are:
                           - Crops
                           - Farmer
                           - Livestock
                           - Property

                           ## Personal vs Aggregate
                           Aggregate data on a resource is accessed through a respective resource path, which has the resource pluralized. e.g `/api/crops` would return ALL the crops available. As you can imagine, this would return a large amount of data. So, we've allowed you to limit/[throttle](/docs/#throttling-requests) the aggregate requests.
                           Personal requests are those which retrieve a specific record from a resource. e.g. `/api/crop/[CROP_ID_HERE]` would return the specific crop record associated with the crop id passed in the path where `CROP_ID_HERE` is. Please note that for personal requests, the resource name is kept singular.
                           ## Throttling Requests
                           `limit` - This is the number of results that will be returned from this query (defaults to 100).
                           `offset` - This allows for pagination in sets of whatever the limit is (defaults to 0).
    - name: Aggregate Functions
      description: |
                            These functions are operations done on aggragate data endpoints. These include:
                            - `date_range`
                                > A 'date_range' parameter that allows the user to specify a field to be compared with a date range by also specifying either a `start_date`, an `end_date`, or both. If only one is specified,
                                > it will return all the results with a date after the start date or before the end date accordingly. Example query;
                                ```
                                /api/crops?end_date=2012-08-31&start_date=2012-08-01&date_range=Plant_Date&District=Ticky%20Ticky
                                ```
                                > This will return all the crops planted in August of 2008 in the Ticky Ticky District."
                            - `sum`
                                > A 'sum' parameter can be included with an API call and - when specified - will cause the API to return the accumulated total of all the values in that field/column.
                                > Example query;
                                ```
                                /api/crops?Crop_Name=Yam&parish=Trelawny&operation=sum&field=Crop_Total_Area
                                ```
                                > This will return the how much land is being used for yam farming in Trelawny.
                            - `avg`
                                > This computes the average of all the values from a specific field in the result set. Example query:
                                ```
                                /api/properties?District=Ticky%20Ticky&operation=avg&field=Property_Size_Ha
                                ```
                            - `min`
                                > This returns the lowest of all the values from a specific field in the result set.
                            - `max`
                                > This returns the highest of all the values from a specific field in the result set.
                            - `var`
                                > This returns the statistical variance of all the values from a specific field in the result set.
                            - `stdev`
                                > This returns the standard deviation of all the values from a specific field in the result set.
    - name: How to use the API
      description: |
                           This documentation provides all the resources offered and how they may be accessed, however, and API key/token must be passed as `access_token` within the header of the request.
                           # API Registration
                           You MUST register on ther [Harvest API website]() before interfacing with the API for any development.
                           # API Keys
                           An application programming interface key (API key) is a code passed in by computer programs calling an application programming interface (API) to identify the calling program, its developer, or its user to the Web site. Ths is done to ensure we know how the information being provided is being accessed. Remember, the api key MUST be passedin the header of the requested through the variable `access_token`.
    - name: Crop
      description: Crop information
    - name: Farmer
      description: Farmer information
    - name: Livestock
      description: Livestock information
    - name: Property
      description: Property information
paths:
    /crops:
        get:
            summary: Get All Crops
            description: |
                Retrieve information on all crops
            operationId: getAllCrops
            tags:
                - Crop
            produces:
                - application/json
            responses:
                200:
                    description: Successful
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Crop'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
            parameters:
                - name: limit
                  in: query
                  description: This is the number of results that will be returned from this query (defaults to 100).
                  required: false
                  type: number
                  default: 100
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Crop'
                - name: offset
                  in: query
                  description: This allows for pagination in sets of whatever the limit is (defaults to 0).
                  required: false
                  type: number
                  default: 0
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Crop'
                - name: field
                  in: query
                  description: This allows for filtering results accordingly - for example you could get all the properties in the parish of Portland. So, using URL encoding the request might be `/crops?parish=Portland`
                  required: false
                  type: string
    /crop/{id}:
        get:
            summary: Get Crop By ID
            description: |
                Retrieve information on a crop, provided an ID
            operationId: getCropByID
            tags:
                - Crop
            produces:
                - application/json
            responses:
                200:
                    description: Successful
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Crop'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
    /farmers:
        get:
            summary: Get All Farmers
            description: |
                Retrieve information on all farmers
            operationId: getAllFarmers
            tags:
                - Farmer
            produces:
                - application/json
            responses:
                200:
                    description: Successful
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Farmer'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
            parameters:
                - name: limit
                  in: query
                  description: This is the number of results that will be returned from this query (defaults to 100).
                  required: false
                  type: number
                  default: 100
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Farmer'
                - name: offset
                  in: query
                  description: This allows for pagination in sets of whatever the limit is (defaults to 0).
                  required: false
                  type: number
                  default: 0
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Farmer'
                - name: field
                  in: query
                  description: This allows for filtering results accordingly - for example you could get all the properties in the parish of Portland. So, using URL encoding the request might be `/farmers?parish=Portland`
                  required: false
                  type: string
    /farmer/{id}:
        get:
            summary: Get Farmer By ID
            description: |
                Retrieve information on a Farmer, provided an ID
            operationId: getFarmerByID
            tags:
                - Farmer
            produces:
                - application/json
            responses:
                200:
                    description: Successful
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Farmer'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
    /livestock:
        get:
            summary: Get All Livestock
            description: |
                Retrieve information on all livestock
            operationId: getAllLivestock
            tags:
                - Livestock
            produces:
                - application/json
            responses:
                200:
                    description: Successful
                    schema:
                      type: array
                      items:
                          $ref: '#/definitions/Livestock'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
            parameters:
                - name: limit
                  in: query
                  description: This is the number of results that will be returned from this query (defaults to 100).
                  required: false
                  type: number
                  default: 100
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Livestock'
                - name: offset
                  in: query
                  description: This allows for pagination in sets of whatever the limit is (defaults to 0).
                  required: false
                  type: number
                  default: 0
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Livestock'
                - name: field
                  in: query
                  description: This allows for filtering results accordingly - for example you could get all the properties in the parish of Portland. So, using URL encoding the request might be `/livestock?parish=Portland`
                  required: false
                  type: string
    /livestock/{id}:
        get:
            summary: Get Livestock By ID
            description: |
                Retrieve information on a livestock, provided an ID
            operationId: getLivestockByID
            tags:
                - Livestock
            produces:
                - application/json
            parameters:
                - name: id
                  in: path
                  description: requests object
                  type: string
                  required: true
            responses:
                200:
                    description: Successful
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Livestock'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
    /properties:
        get:
            summary: Get All Property
            description: |
                Retrieve information on all properties
            operationId: getAllProperties
            tags:
                - Property
            produces:
                - application/json
            responses:
                200:
                    description: Successful
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Property'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
            parameters:
                - name: limit
                  in: query
                  description: This is the number of results that will be returned from this query (defaults to 100).
                  required: false
                  type: number
                  default: 100
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Property'
                - name: offset
                  in: query
                  description: This allows for pagination in sets of whatever the limit is (defaults to 0).
                  required: false
                  type: number
                  default: 0
                  schema:
                      type: array
                      items:
                          $ref: '#/definitions/Property'
                - name: field
                  in: query
                  description: This allows for filtering results accordingly - for example you could get all the properties in the parish of Portland. So, using URL encoding the request might be `/property?parish=Portland`
                  required: false
                  type: string
    /property/{id}:
        get:
            summary: Get Property By ID
            description: |
                Retrieve information on a property, provided an ID
            operationId: getPropertyByID
            tags:
                - Property
            produces:
                - application/json
            parameters:
                - name: id
                  in: path
                  description: requests object
                  type: string
                  required: true
            responses:
                200:
                    description: Successful
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Property'
                400:
                    description: Bad Request
                401:
                    description: Unauthorized
                500:
                    description: Internal Server Error
definitions:
    Crop:
        type: object
        properties:
            IDX_Property:
                type: number
                description:  Link to Property table
                example: 1971349
            IDX_Crop:
                type: number
                description:  Index key
                example:
            Crop_Variety:
                type: string
                description: The variety name of crop
                example: "Not Stated"
            Crop_Name:
                type: string
                description: The name of a crop
                example: "Ackee"
            Crop_Total_Area:
                type: number
                description: The total area of land the crop is grown on
                example: 0.61
            Crop_Count:
                type: number
                description: The amount of crop produced
                example: 0
            Plant_Date:
                type: string
                description: They dtey the crop was planted
                example: "2004-08-11T00:00:00.000Z"
            Major_Market_Percentage:
                type: number
                description: The Major Market proportion
                example: 0
            Minor_Market_Percentage:
                type: number
                description: The Minor Market proportion
                example: 0
            Crop_Remarks:
                type: string
                description: Remarks and comments about the crop
                example: ""
            Create_Date:
                type: string
                description: The date this entry was created
                example: "2008-11-04T12:44:55.846Z"
            Update_Date:
                type: string
                description: The date this entry was updated
                example: "2008-11-04T12:44:55.846Z"
            Code_Area_Unit:
                type: string
                description: The unit of measure for the crop's area (ha)
                example: "Hectare"
            Major_Market:
                type: string
                description: The customer that demands the crop mostly
                example: n/a
            Minor_Market:
                type: string
                description: The customer that demands the crop the least
                example: n/a
            IDX_StakeHolder:
                type: number
                description: Link to Stakeholder table
                example: 952790
            Property_Address:
                type: string
                description: The address of the property where the crop is grown
                example: "Somewhere"
            District:
                type: string
                description: The district in which the property is located
                example: "INVERNESS"
            Parish:
                type: string
                description: The parish in which the district is located
                example: "ST.ANN"
            Parish_Extension_Name:
                type: string
                description: The extension within the parish
                example: "ALEXANDRIA"
    Farmer:
        type: object
        properties:
            Farmer_Personal_Info:
              type: object
              properties:
                IDX_Stakeholder:
                  type: number
                  description: Link to Stakeholder table
                  example: 952520
                Stakeholder_Num:
                  type: number
                  description: Link to Stakeholder_Num field in the receipt table
                  example: 081119321
                Company_Name:
                  type: string
                  description: Company Name
                  example: MJD Agriculture
                First_Name:
                  type: string
                  description: First Name
                  example: Harold
                Middle_Name:
                  type: string
                  description: Middle Name
                  example: Antoine
                Last_Name:
                  type: string
                  description: Last Name
                  example: Robertson
                Alias:
                  type: string
                  description: Alias
                  example: Beenie Man
                DOB:
                  type: string
                  description: Date of Birth
                  example: 1975-11-30T00:00:00.000Z
                Gender:
                  type: string
                  description: Gender of the farmer
                  example: Male
                Res_Street_Address:
                  type: string
                  description: Residential street address of the farmer
                  example: 212 Sunny Lane
                Res_District_Name:
                  type: string
                  description: Residential district name
                  example: Columbia
                Res_Post_Office:
                  type: string
                  description: Residential post office
                  example: Half Way Tree
                Res_Tele_Num:
                  type: string
                  description: Residential Telephone Number
                  example: 8769782123
                Bus_Street_Address:
                  type: string
                  description: Business Street Address
                  example: 212 Sunny Lane
                Bus_District_Name:
                  type: string
                  description: Business District Name
                  example: Columbia
                Bus_Post_Office:
                  type: string
                  description: Business Post Office
                  example: Half Way Tree
                Bus_Tele_Num:
                  type: string
                  description: Business Telephone Number
                  example: 8769782123
                Cell_Num:
                  type: string
                  description: Cell Number
                  example: 8763782123
                Fax_Num:
                  type: string
                  description: Fax Number
                  example: 8769782123
                Email_Address:
                  type: string
                  description: Email Address
                  example: nick@slashroots.org
                Identification_Num:
                  type: string
                  description: ID #
                  example: 122-132-526
                Photo_Path:
                  type: string
                  description: Path to JPG Photo
                  example: nick.jpg
                Interviewer:
                  type: string
                  description: Interviewer Name
                  example:
                VerifiedYN:
                  type: string
                  description: Verification Status of the Farmer
                  example: Y
                Stakeholder_Status:
                  type: string
                  description: Status of the Stakeholder
                  example:
                Res_Parish:
                  type: string
                  description: Residential Parish
                  example: Portland
                Bus_Parish:
                  type: string
                  description: Business Parish
                  example: St. Andrew
                Stakeholder_Type:
                  type: string
                  description: Stakeholder Type
                  example: Farmer
                Update_Date:
                  type: string
                  description: Last Updated Date
                  example: '2008-11-03T08:50:30.900Z'
                Create_Date:
                  type: string
                  description: Record Creation Date
                  example: '2008-11-03T08:50:30.900Z'
                Registration_Date:
                  type: string
                  description: Registration Date
                  example: '2008-11-03T08:50:30.900Z'
                Verified_Date:
                  type: string
                  description: Verification Date
                  example: '2008-11-03T08:50:30.900Z'
            IDX_Farmer_Profile:
                type: number
                description: Index key
                example: 523402
            IDX_StakeHolder:
                type: number
                description: Link to Stakeholder table
                example: 952520
            Create_Date:
                type: string
                description: The date this record was created
                example: '2008-11-03T08:50:30.900Z'
            Update_Date:
                type: string
                description: The last time this record was updated.
                example: '2008-11-03T08:51:59.590Z'
            Holding_Start:
                type: string
                description: Year farm became operational
                example: '1994'
            Nearest_Police_Station:
                type: string
                description: Closest Police Station to the farm
                example: 'Manchioneal'
            Farmer_Profile_Remarks:
                type: string
                description: Remarks and comments about the farmer
                example: "N/A"
            Jas_Farmer_Group:
                type: string
                description: The JAS farmer group to which the farmer belongs
                example: "N/A"
            Respondent:
                type: string
                description: The person registering the farm
                example: "John Doe"
            Manager:
                type: string
                description: The person hired to manage the farm
                example: "Michael King"
            Income_Source:
                type: string
                description: Farmer's main source of income
                example: "Contracted Electrician"
            Education_Level:
                type: number
                description: The education level of the farmer
                example: 2
            Occupation:
                type: string
                description: The farmer's main occupation
                example: "Electrician"
            Farmer_Type:
                type: string
                description: "The type of farmer (Regular, Organic, Greenhouse, Mixed)"
                example: Mixed
            Training_Method:
                type: string
                description: "The method of training the famrer has undergone"
                example: "N/A"
            Agri_Institution:
                type: string
                description: "The agricultural institution to which the farmer has been associated with"
                example: "N/A"
            Main_Agri_Activity:
                type: string
                description: "The specified area of farming"
                example: "N/A"
            Agri_Training:
                type: string
                description: "Agricultural training the farmer has completed"
                example: "N/A"
            Qualification:
                type: string
                description: "The qualification the farmer has attained"
                example: "N/A"
            Live_On_Farm:
                type: string
                description: "Whether or not the farmer lives on the farm"
                example: "No"
    Livestock:
        type: object
        properties:
            IDX_Livestock:
                type: number
                description: Index key
                example: 340798
            IDX_Property:
                type: number
                description: Link to Property table
                example: 1971353
            Livestock_Count:
                type: number
                description: The actual amount of livestock being reared
                example: 14
            Livestock_Capacity:
                type: number
                description: The maximum amount of livestock that can be accommodated
                example: 20
            Livestock_Remarks:
                type: string
                description: Remarks and comments about the livestock
                example: ""
            Major_Market_Percentage:
                type: number
                description: The Major Market proportion
                example: 0
            Minor_Market_Percentage:
                type: number
                description: The Minor Market proportion
                example: 0
            Create_Date:
                type: string
                description: The date this record was created
                example: "2008-11-04T13:12:32.990Z"
            Update_Date:
                type: string
                description: The date this record was last updated
                example: "2008-11-04T13:12:32.990Z"
            Livestock_Name:
                type: string
                description: Name of Livestock
                example: "Pig"
            Major_Market:
                type: string
                description: The customer that demands the livestock the mostly
                example: "Hotel"
            Minor_Market:
                type: string
                description: The customer that demands the livestock the least
                example: "Householder"
            District:
                type: string
                description: District the livestock is being reared
                example: "INVERNESS"
            Parish_Extension_Name:
                type: string
                description: Extension the parish belongs to
                example: "ALEXANDRIA"
            Parish:
                type: string
                description: Parish the district is located in
                example: "ST.ANN"
            Property_Address:
                type: string
                description: Property address on which the lovestock is being reared
                example: "inverness inverness p.o. st. ann"
            IDX_StakeHolder:
                type: number
                description: Link to Stakeholder table
                example: 952798
            Livestock_Stage:
                type: string
                description: The stage of life at which the livestock is
                example: "Not Stated"
    Property:
        type: object
        properties:
            IDX_Property:
                type: number
                description: Index Key
                example: 1971350
            IDX_StakeHolder:
                type: number
                description: Link to Stakeholder table
                example: 952792
            District:
                type: string
                description: The district in which the property is located
                example: 'GREENLAND'
            Parish:
                type: string
                description: The parish in which the property is located
                example: 'MANCHESTER'
            Parish_Extension_Name:
                type: string
                description: The extension within the parish where the property is located
                example: 'MILE GULLY'
            Extension_Officer:
                type: string
                description: The name of the Extension Officer assigned to the extension area where the property is located
                example: '47'
            Property_Address:
                type: string
                description: The address of the property size
                example: 'Greenland'
            Property_Size:
                type: number
                description: The size of the property
                example: 1.62
            Property_Usage:
                type: number
                description:  How much of the property is being used to farm
                example: 0.01
            Property_Remarks:
                type: string
                description: Remarks or comments about the property
                example: ''
            Volume_Num:
                type: string
                description: The volume of production
                example: ''
            Folio_Num:
                type: string
                description: A number used to identify the property
                example: ''
            Distance_From_Road:
                type: number
                description: Units of measurement for the Distance_From_Road
                example: 0
            Primary_Property_YN:
                type: number
                description: Whether or not this is the primary property of production
                example: 2
            Latitude:
                type: number
                description: Latitudinal location of property
                example: 0
            Longitude:
                type: number
                description: Longitudinal location of the property
                example: 0
            Description_:
                type: string
                description: Description of property
                example: 'Leased'
            Property_Status:
                type: string
                description: Whether or not production on the property is active or inactive
                example: 'Active'
            Ownership:
                type: string
                description: Who owns the property, whether its an individual or an entity
                example: n/a
            Distance_Units:
                type: number
                description: Units of measurement for the Distance_From_Road
                example: 0
            Property_Usage_Units:
                type: string
                description: The units of measurement for the property usage
                example: 'Hectare'
            Property_Size_Units:
                type: string
                description: The units of measurement for the property size
                example: 'Hectare'
            Irrigation_Source:
                type: string
                description: The source from which the property is irrigated
                example: n/a
            irrigation_access_yn:
                type: string
                description: Whether or not the property has access to irrigation
                example: n/a

